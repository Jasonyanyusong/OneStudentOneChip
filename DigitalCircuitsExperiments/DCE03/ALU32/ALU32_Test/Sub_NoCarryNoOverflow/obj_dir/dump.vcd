$version Generated by VerilatedVcd $end
$timescale 1s $end

 $scope module TOP $end
  $var wire 32 $ a [31:0] $end
  $var wire 32 % b [31:0] $end
  $var wire  1 & carry [0:0] $end
  $var wire  1 ( overflow $end
  $var wire 32 ) result [31:0] $end
  $var wire  1 # sub_add $end
  $var wire  1 ' zero $end
  $scope module ALU32_Test $end
   $var wire 32 $ a [31:0] $end
   $var wire 32 % b [31:0] $end
   $var wire 32 * b_withCin [31:0] $end
   $var wire  1 & carry [0:0] $end
   $var wire  1 ( overflow $end
   $var wire 32 ) result [31:0] $end
   $var wire  1 # sub_add $end
   $var wire  1 , testF2S1B1T1_expected_carry [0:0] $end
   $var wire  1 , testF2S1B1T1_expected_overflow $end
   $var wire 32 + testF2S1B1T1_expected_result [31:0] $end
   $var wire  1 , testF2S1B1T1_expected_zero $end
   $var wire  1 0 testF2S1B1T2_expected_overflow $end
   $var wire  1 / testF2S1B1T2_expected_zero $end
   $var wire  1 3 testF2S1B1T3_expected_overflow $end
   $var wire  1 2 testF2S1B1T3_expected_zero $end
   $var wire  1 , testF2S1B2T1_expected_carry [0:0] $end
   $var wire  1 , testF2S1B2T1_expected_overflow $end
   $var wire 32 - testF2S1B2T1_expected_result [31:0] $end
   $var wire  1 , testF2S1B2T1_expected_zero $end
   $var wire  1 , testF2S1B2T2_expected_carry [0:0] $end
   $var wire  1 , testF2S1B2T2_expected_overflow $end
   $var wire 32 . testF2S1B2T2_expected_result [31:0] $end
   $var wire  1 , testF2S1B2T2_expected_zero $end
   $var wire  1 , testF2S1B2T3_expected_carry [0:0] $end
   $var wire  1 , testF2S1B2T3_expected_overflow $end
   $var wire 32 1 testF2S1B2T3_expected_result [31:0] $end
   $var wire  1 , testF2S1B2T3_expected_zero $end
   $var wire  1 , testF2S1B3T1_expected_carry [0:0] $end
   $var wire  1 , testF2S1B3T1_expected_overflow $end
   $var wire 32 1 testF2S1B3T1_expected_result [31:0] $end
   $var wire  1 , testF2S1B3T1_expected_zero $end
   $var wire  1 , testF2S1B3T2_expected_carry [0:0] $end
   $var wire  1 , testF2S1B3T2_expected_overflow $end
   $var wire 32 . testF2S1B3T2_expected_result [31:0] $end
   $var wire  1 , testF2S1B3T2_expected_zero $end
   $var wire  1 , testF2S1B3T3_expected_carry [0:0] $end
   $var wire  1 , testF2S1B3T3_expected_overflow $end
   $var wire 32 - testF2S1B3T3_expected_result [31:0] $end
   $var wire  1 , testF2S1B3T3_expected_zero $end
   $var wire  1 ' zero $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
1#
b00111010110111100110100010110001 $
b11111000101001000011001011101011 %
0&
0'
0(
b01000010001110100011010111000110 )
b00000111010110111100110100010101 *
b01000010001110100011010111000110 +
0,
b00110011100000101001101110011100 -
b00000000000000000000000000000000 .
0/
00
b11001100011111010110010001100100 1
02
03
#2
b00000111010110111100110100010101 %
b00110011100000101001101110011100 )
b11111000101001000011001011101011 *
#3
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
1'
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
#4
b00000111010110111100110100010101 $
b00111010110111100110100010110001 %
0'
b11001100011111010110010001100100 )
b11000101001000011001011101001111 *
#5
b11000101001000011001011101001111 $
b11111000101001000011001011101011 %
1&
b00000111010110111100110100010101 *
#6
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
0&
1'
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
#7
b11111000101001000011001011101011 $
b11000101001000011001011101001111 %
1&
0'
b00110011100000101001101110011100 )
b00111010110111100110100010110001 *
#8
