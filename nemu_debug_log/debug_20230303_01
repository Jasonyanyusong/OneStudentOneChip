Welcome to Ubuntu 22.04.2 LTS (GNU/Linux 5.19.0-32-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

1 device has a firmware upgrade available.
Run `fwupdmgr get-upgrades` for more information.


 * Introducing Expanded Security Maintenance for Applications.
   Receive updates to over 25,000 software packages with your
   Ubuntu Pro subscription. Free for personal use.

     https://ubuntu.com/pro

Expanded Security Maintenance for Applications is not enabled.

23 updates can be applied immediately.
10 of these updates are standard security updates.
To see these additional updates run: apt list --upgradable

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


1 device has a firmware upgrade available.
Run `fwupdmgr get-upgrades` for more information.

Last login: Thu Mar  2 00:17:01 2023 from 10.9.126.89
yanyusong@BJ101ECELabE:~$ sudo fwupdmgr get-upgrades
[sudo] password for yanyusong: 
Devices with no available firmware updates: 
 • ST1000DM003-1SB102
 • System Firmware
 • UEFI Device Firmware
11EAA12BCD
│
└─UEFI dbx:
  │   Device ID:          362301da643102b9f38477387e2193e57abaa590
  │   Summary:            UEFI revocation database
  │   Current version:    77
  │   Minimum Version:    77
  │   Vendor:             UEFI:Linux Foundation
  │   Install Duration:   1 second
  │   GUIDs:              c6682ade-b5ec-57c4-b687-676351208742 ← UEFI\CRT_A1117F516A32CEFCBA3F2D1ACE10A87972FD6BBE8FE0D0B996E09E65D802A503
  │                       f8ba2887-9411-5c36-9cee-88995bb39731 ← UEFI\CRT_A1117F516A32CEFCBA3F2D1ACE10A87972FD6BBE8FE0D0B996E09E65D802A503&ARCH_X64
  │   Device Flags:       • Internal device
  │                       • Updatable
  │                       • Supported on remote server
  │                       • Needs a reboot after installation
  │                       • Only version upgrades are allowed
  │                       • Signed Payload
  │ 
  ├─Secure Boot dbx:
  │     New version:      217
  │     Remote ID:        lvfs
  │     Release ID:       15179
  │     Summary:          UEFI Secure Boot Forbidden Signature Database
  │     Variant:          x64
  │     License:          Proprietary
  │     Size:             13.8 kB
  │     Created:          2020-07-29
  │     Urgency:          High
  │     Vendor:           Linux Foundation
  │     Duration:         1 second
  │     Release Flags:    • Is upgrade
  │     Description:      
  │     This updates the dbx to the latest release from Microsoft which adds insecure versions of grub and shim to the list of forbidden signatures due to multiple discovered security updates.
  │     
  │     Before installing the update, fwupd will check for any affected executables in the ESP and will refuse to update if it finds any boot binaries signed with any of the forbidden signatures.If the installation fails, you will need to update shim and grub packages before the update can be deployed.
  │     
  │     Once you have installed this dbx update, any DVD or USB installer images signed with the old signatures may not work correctly.You may have to temporarily turn off secure boot when using recovery or installation media, if new images have not been made available by your distribution.
  │   
  ├─Secure Boot dbx:
  │     New version:      211
  │     Remote ID:        lvfs
  │     Release ID:       15178
  │     Summary:          UEFI Secure Boot Forbidden Signature Database
  │     Variant:          x64
  │     License:          Proprietary
  │     Size:             13.5 kB
  │     Created:          2021-04-29
  │     Urgency:          High
  │     Vendor:           Linux Foundation
  │     Duration:         1 second
  │     Release Flags:    • Is upgrade
  │     Description:      
  │     This updates the dbx to the latest release from Microsoft which adds insecure versions of grub and shim to the list of forbidden signatures due to multiple discovered security updates.
  │   
  └─Secure Boot dbx:
        New version:      190
        Remote ID:        lvfs
        Release ID:       6104
        Summary:          UEFI Secure Boot Forbidden Signature Database
        Variant:          x64
        License:          Proprietary
        Size:             14.4 kB
        Created:          2020-07-29
        Urgency:          High
        Vendor:           Linux Foundation
        Duration:         1 second
        Release Flags:    • Is upgrade
        Description:      
        This updates the dbx to the latest release from Microsoft which adds insecure versions of grub and shim to the list of forbidden signatures due to multiple discovered security updates.
      
yanyusong@BJ101ECELabE:~$ ,s
,s: command not found
yanyusong@BJ101ECELabE:~$ ls
linux  OneStudentOneChip  snap  yosys  模板
yanyusong@BJ101ECELabE:~$ ks
ks: command not found
yanyusong@BJ101ECELabE:~$ ls
linux  OneStudentOneChip  snap  yosys  模板
yanyusong@BJ101ECELabE:~$ cd OneStudentOneChip
yanyusong@BJ101ECELabE:~/OneStudentOneChip$ ls
DigitalCircuitsExperiments  LICENSE     pa0               pa2                 ProgressReport   setup_fedora.sh        setup_ubuntu.sh                                 《数字电路基础实验》实验报告v1.pdf
envsetup.sh                 nemu_new    pa1               pa3                 README.md        setup_kali.sh          tools
init.sh                     nemu_store  PA1.1_NEMU_amd64  pa4                 resources        setup_macos_arm64.sh   南京大学《数字电路基础实验》实验一实验报告.pdf
LabReport                   npc         PA1.1_NEMU_arm64  PreLearnActivities  setup_debian.sh  setup_macos_x86_64.sh  南京大学《数字电路基础实验》实验二实验报告.pdf
yanyusong@BJ101ECELabE:~/OneStudentOneChip$ cd pa1
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1$ ls
info  init.sh  nemu_new  nemu_old  pa1.1_log
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1$ cd nemu_new
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ ls
build  configs  include  Kconfig  Makefile  README.md  resource  scripts  src  tools
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make menuconfig


*** End of the configuration.
*** Execute 'make' to start the build or try 'make help'.

yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
+ LD /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter
/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter --log=/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt  
[src/utils/log.c:28 init_log] Log is written to /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt
[src/memory/paddr.c:56 init_mem] physical memory area [0x80000000, 0x87ffffff]
[src/monitor/monitor.c:51 load_img] No image is given. Use the default build-in image.
[src/monitor/monitor.c:28 welcome] Trace: ON
[src/monitor/monitor.c:29 welcome] If trace is enabled, a log file will be generated to record the trace. This may lead to a large log file. If it is not necessary, you can disable it in menuconfig
[src/monitor/monitor.c:32 welcome] Build time: 22:52:40, Mar  1 2023
Welcome to riscv64-NEMU!
For help, type "help"
(nemu) p 1024
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1024" , evaluating
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 4: 1024
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 1
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 0. Only Two Side Parentheses Check FAILED
Evaluate Success, Ans (Hex): 400, Ans (Dec): 1024, Ans (Oct): 2000
(nemu) p 10 + 1
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "10 + 1" , evaluating
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 2: 10
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 2 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 3 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 5 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1024"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "1"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
Invalid eval() call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p 12 + 2
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "12 + 2" , evaluating
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 2: 12
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1224"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 2 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 3 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 5 with len 1: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "2"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1224"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "2"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
Invalid eval() call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p 1 + 2 + 3
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1 + 2 + 3" , evaluating
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1224"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 1 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 2 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 3 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 4 with len 1: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "2"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 5 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 6 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 7 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 8 with len 1: 3
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "3"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 5
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1224"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "2"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    3, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    4, Token Type (Decimal ID):  248, Token String: "3"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 2, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 2, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 3, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 3, Right Index: 4
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 4. Only Two Side Parentheses Check FAILED
Invalid eval() call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) message expr checkpoint off
[SDB INSTRUCTION: static int cmd_message(char *args)] cmd_message command
[SDB INSTRUCTION: static int cmd_message(char *args)] Modify mode of different types(instruction, debug, checkopint, assertpoint) of message output in different areas(sdb, expr, watchpoint)
expr_print_checkpoint: OFF

1) In Simple Debuger Module:
Instruction Message: ON 
Debug Message: ON 
Checkpoint Message: ON 
Assertpoint Message: ON 

2) In Expression Evaluation Module:
Instruction Message: ON 
Debug Message: ON 
Checkpoint Message: OFF 
Assertpoint Message: ON 

3) In Watch Point Module:
Instruction Message: ON 
Debug Message: ON 
Checkpoint Message: ON 
Assertpoint Message: ON 

(nemu) p 1 + 2 + 3
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1 + 2 + 3" , evaluating
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 1: 1
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1224"
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 1 with len 1:  
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 2 with len 1: +
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 3 with len 1:  
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 4 with len 1: 2
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "2"
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 5 with len 1:  
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 6 with len 1: +
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 7 with len 1:  
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 8 with len 1: 3
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "3"
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 5
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1224"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "2"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    3, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    4, Token Type (Decimal ID):  248, Token String: "3"
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 3
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 4
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 3
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 4
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 2, Right Index: 3
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 2, Right Index: 4
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 3, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 3, Right Index: 4
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 4. Only Two Side Parentheses Check FAILED
Invalid eval() call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) message expr checkpoint on
[SDB INSTRUCTION: static int cmd_message(char *args)] cmd_message command
[SDB INSTRUCTION: static int cmd_message(char *args)] Modify mode of different types(instruction, debug, checkopint, assertpoint) of message output in different areas(sdb, expr, watchpoint)
expr_print_checkpoint: ON

1) In Simple Debuger Module:
Instruction Message: ON 
Debug Message: ON 
Checkpoint Message: ON 
Assertpoint Message: ON 

2) In Expression Evaluation Module:
Instruction Message: ON 
Debug Message: ON 
Checkpoint Message: ON 
Assertpoint Message: ON 

3) In Watch Point Module:
Instruction Message: ON 
Debug Message: ON 
Checkpoint Message: ON 
Assertpoint Message: ON 

(nemu) p 1 + 2 + 3
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1 + 2 + 3" , evaluating
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1224"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 1 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 2 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 3 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 4 with len 1: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "2"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 5 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 6 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 7 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 8 with len 1: 3
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "3"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 5
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1224"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "2"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    3, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    4, Token Type (Decimal ID):  248, Token String: "3"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 2, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 2, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 3, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 3, Right Index: 4
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 4. Only Two Side Parentheses Check FAILED
Invalid eval() call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) q
[SDB INSTRUCTION: static int cmd_q(char *args)] cmd_q command
[SDB INSTRUCTION: static int cmd_q(char *args)] Exit NEMU
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ LD /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter
/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter --log=/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt  
[src/utils/log.c:28 init_log] Log is written to /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt
[src/memory/paddr.c:56 init_mem] physical memory area [0x80000000, 0x87ffffff]
[src/monitor/monitor.c:51 load_img] No image is given. Use the default build-in image.
[src/monitor/monitor.c:28 welcome] Trace: ON
[src/monitor/monitor.c:29 welcome] If trace is enabled, a log file will be generated to record the trace. This may lead to a large log file. If it is not necessary, you can disable it in menuconfig
[src/monitor/monitor.c:32 welcome] Build time: 22:52:40, Mar  1 2023
Welcome to riscv64-NEMU!
For help, type "help"
(nemu) p 1 + 2 +3
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1 + 2 +3" , evaluating
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 1 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 2 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 3 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 4 with len 1: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "2"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 5 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 6 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 7 with len 1: 3
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "3"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 5
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "2"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    3, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    4, Token Type (Decimal ID):  248, Token String: "3"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 2, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 2, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 3, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 3, Right Index: 4
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 4. Only Two Side Parentheses Check FAILED
Invalid eval() call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p 12 + 2
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "12 + 2" , evaluating
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 2: 12
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "12"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 2 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 3 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 5 with len 1: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "2"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "12"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "2"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
Invalid eval() call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p 1024 + 12
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1024 + 12" , evaluating
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 4: 1024
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 5 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 6 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 7 with len 2: 12
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "12"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1024"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "12"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
Invalid eval() call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p 1 + 1
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1 + 1" , evaluating
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 1 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 2 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 3 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 4 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "12"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1024"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "12"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
Invalid eval() call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p 4096 + 8192
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "4096 + 8192" , evaluating
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 4: 4096
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "4096"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 5 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 6 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 7 with len 4: 8192
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "8192"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "4096"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "8192"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
Invalid eval() call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p (1 + 2)
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "(1 + 2)" , evaluating
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[6] = "\(" at position 0 with len 1: (
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #18
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_LEFT_PARENTHESES TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 238
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "(096"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 1 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 2 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 3 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+192"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 5 with len 1: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "2"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[7] = "\)" at position 6 with len 1: )
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #19
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_RIGHT_PARENTHESES TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 237
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: ")"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 5
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  238, Token String: "(096"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  248, Token String: "1"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  242, Token String: "+192"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    3, Token Type (Decimal ID):  248, Token String: "2"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    4, Token Type (Decimal ID):  237, Token String: ")"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #03
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #04
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type II Fail, Right side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #03
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #04
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type II Fail, Right side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #03
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #04
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 3, get Type II Fail, Right side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #03
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #05
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #07
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #08
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #10
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #11
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] Check SUCCESS, parentheses are balanced!
[EXPR DEBUG: static bool make_token(char *e)] Paired Success, Left Index: 0, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 2, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 2, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 3, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 3, Right Index: 4
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #03
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #05
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #07
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #08
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #10
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #11
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] Check SUCCESS, parentheses are balanced!
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 4. Only Two Side Parentheses Check MATCHED
Invalid eval() call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) q
[SDB INSTRUCTION: static int cmd_q(char *args)] cmd_q command
[SDB INSTRUCTION: static int cmd_q(char *args)] Exit NEMU
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ q
Command 'q' not found, but can be installed with:
sudo snap install q                       # version 1.6.3-1, or
sudo apt  install python3-q-text-as-data  # version 3.1.6-1
See 'snap info q' for additional versions.
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
+ LD /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter
/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter --log=/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt  
[src/utils/log.c:28 init_log] Log is written to /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt
[src/memory/paddr.c:56 init_mem] physical memory area [0x80000000, 0x87ffffff]
[src/monitor/monitor.c:51 load_img] No image is given. Use the default build-in image.
[src/monitor/monitor.c:28 welcome] Trace: ON
[src/monitor/monitor.c:29 welcome] If trace is enabled, a log file will be generated to record the trace. This may lead to a large log file. If it is not necessary, you can disable it in menuconfig
[src/monitor/monitor.c:32 welcome] Build time: 22:52:40, Mar  1 2023
Welcome to riscv64-NEMU!
For help, type "help"
(nemu) p 12 + 3
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "12 + 3" , evaluating
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 2: 12
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "12"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 2 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 3 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 5 with len 1: 3
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "3"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "12"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "3"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #03
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #03
Invalid eval() call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) q
[SDB INSTRUCTION: static int cmd_q(char *args)] cmd_q command
[SDB INSTRUCTION: static int cmd_q(char *args)] Exit NEMU
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
+ LD /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter
/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter --log=/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt  
[src/utils/log.c:28 init_log] Log is written to /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt
[src/memory/paddr.c:56 init_mem] physical memory area [0x80000000, 0x87ffffff]
[src/monitor/monitor.c:51 load_img] No image is given. Use the default build-in image.
[src/monitor/monitor.c:28 welcome] Trace: ON
[src/monitor/monitor.c:29 welcome] If trace is enabled, a log file will be generated to record the trace. This may lead to a large log file. If it is not necessary, you can disable it in menuconfig
[src/monitor/monitor.c:32 welcome] Build time: 22:52:40, Mar  1 2023
Welcome to riscv64-NEMU!
For help, type "help"
(nemu) p 1024 + 2048
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1024 + 2048" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 4: 1024
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 5 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 6 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 7 with len 4: 2048
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "2048"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1024"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "2048"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #03: Exit the "if" evaluation
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #04: q > p
Invalid eval() call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) q
[SDB INSTRUCTION: static int cmd_q(char *args)] cmd_q command
[SDB INSTRUCTION: static int cmd_q(char *args)] Exit NEMU
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
+ LD /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter
/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter --log=/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt  
[src/utils/log.c:28 init_log] Log is written to /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt
[src/memory/paddr.c:56 init_mem] physical memory area [0x80000000, 0x87ffffff]
[src/monitor/monitor.c:51 load_img] No image is given. Use the default build-in image.
[src/monitor/monitor.c:28 welcome] Trace: ON
[src/monitor/monitor.c:29 welcome] If trace is enabled, a log file will be generated to record the trace. This may lead to a large log file. If it is not necessary, you can disable it in menuconfig
[src/monitor/monitor.c:32 welcome] Build time: 22:52:40, Mar  1 2023
Welcome to riscv64-NEMU!
For help, type "help"
(nemu) p 10 + 1
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "10 + 1" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 2: 10
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "10"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 2 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 3 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 5 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "10"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "1"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #02: valid_call == false
Invalid Call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p 1 + 1
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1 + 1" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "10"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 1 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 2 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 3 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 4 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "10"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "1"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #02: valid_call == false
Invalid Call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p 2 + 1
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "2 + 1" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 1: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "20"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 1 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 2 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 3 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 4 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "20"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "1"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #02: valid_call == false
Invalid Call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) 1
Unknown command '1'
(nemu) q
[SDB INSTRUCTION: static int cmd_q(char *args)] cmd_q command
[SDB INSTRUCTION: static int cmd_q(char *args)] Exit NEMU
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
src/monitor/sdb/expr.c: In function ‘make_token’:
src/monitor/sdb/expr.c:247:34: error: assignment to expression with array type
  247 |             tokens[nr_token].str = "";
      |                                  ^
make: *** [/home/yanyusong/OneStudentOneChip/pa1/nemu_new/scripts/build.mk:34: /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/obj-riscv64-nemu-interpreter/src/monitor/sdb/expr.o] Error 1
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
src/monitor/sdb/expr.c: In function ‘make_token’:
src/monitor/sdb/expr.c:247:36: error: empty character constant
  247 |             tokens[nr_token].str = '';
      |                                    ^~
src/monitor/sdb/expr.c:247:34: error: assignment to expression with array type
  247 |             tokens[nr_token].str = '';
      |                                  ^
make: *** [/home/yanyusong/OneStudentOneChip/pa1/nemu_new/scripts/build.mk:34: /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/obj-riscv64-nemu-interpreter/src/monitor/sdb/expr.o] Error 1
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
src/monitor/sdb/expr.c: In function ‘make_token’:
src/monitor/sdb/expr.c:247:34: error: assignment to expression with array type
  247 |             tokens[nr_token].str = NULL;
      |                                  ^
make: *** [/home/yanyusong/OneStudentOneChip/pa1/nemu_new/scripts/build.mk:34: /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/obj-riscv64-nemu-interpreter/src/monitor/sdb/expr.o] Error 1
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
+ LD /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter
/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter --log=/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt  
[src/utils/log.c:28 init_log] Log is written to /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt
[src/memory/paddr.c:56 init_mem] physical memory area [0x80000000, 0x87ffffff]
[src/monitor/monitor.c:51 load_img] No image is given. Use the default build-in image.
[src/monitor/monitor.c:28 welcome] Trace: ON
[src/monitor/monitor.c:29 welcome] If trace is enabled, a log file will be generated to record the trace. This may lead to a large log file. If it is not necessary, you can disable it in menuconfig
[src/monitor/monitor.c:32 welcome] Build time: 22:52:40, Mar  1 2023
Welcome to riscv64-NEMU!
For help, type "help"
(nemu) p 1024 + 768
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1024 + 768" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 4: 1024
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "1024 + 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "4"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " + 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 5 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "+ 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 6 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 7 with len 3: 768
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "3"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "768"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1024"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "768"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #02: valid_call == false
Invalid Call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p 10 + 1
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "10 + 1" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 2: 10
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "10 + 1"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "2"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 2 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " + 1"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 3 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "+ 1"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " 1"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 5 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "1"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "168"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1024"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "168"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #02: valid_call == false
Invalid Call
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) q
[SDB INSTRUCTION: static int cmd_q(char *args)] cmd_q command
[SDB INSTRUCTION: static int cmd_q(char *args)] Exit NEMU
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
+ LD /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter
/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter --log=/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt  
[src/utils/log.c:28 init_log] Log is written to /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt
[src/memory/paddr.c:56 init_mem] physical memory area [0x80000000, 0x87ffffff]
[src/monitor/monitor.c:51 load_img] No image is given. Use the default build-in image.
[src/monitor/monitor.c:28 welcome] Trace: ON
[src/monitor/monitor.c:29 welcome] If trace is enabled, a log file will be generated to record the trace. This may lead to a large log file. If it is not necessary, you can disable it in menuconfig
[src/monitor/monitor.c:32 welcome] Build time: 22:52:40, Mar  1 2023
Welcome to riscv64-NEMU!
For help, type "help"
(nemu) p 1024 + 768
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1024 + 768" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 4: 1024
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "1024 + 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "4"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " + 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 5 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "+ 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 6 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 7 with len 3: 768
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "3"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "768"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1024"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "768"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #05
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #06
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #03: Exit the "if" evaluation
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #04: q > p
Invalid eval() call
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #07
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p 2 + 5
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "2 + 5" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 1: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "2 + 5"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "2024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 1 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " + 5"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 2 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "+ 5"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 3 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " 5"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 4 with len 1: 5
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "5"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "568"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "2024"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "568"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #05
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #06
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #03: Exit the "if" evaluation
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #04: q > p
Invalid eval() call
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #07
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) 
(nemu) q
[SDB INSTRUCTION: static int cmd_q(char *args)] cmd_q command
[SDB INSTRUCTION: static int cmd_q(char *args)] Exit NEMU
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
src/monitor/sdb/expr.c: In function ‘make_token’:
src/monitor/sdb/expr.c:247:13: error: too few arguments to function ‘strncpy’
  247 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:284:13: error: too few arguments to function ‘strncpy’
  284 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:306:13: error: too few arguments to function ‘strncpy’
  306 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:328:13: error: too few arguments to function ‘strncpy’
  328 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:350:13: error: too few arguments to function ‘strncpy’
  350 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:372:13: error: too few arguments to function ‘strncpy’
  372 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:394:13: error: too few arguments to function ‘strncpy’
  394 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:416:13: error: too few arguments to function ‘strncpy’
  416 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:437:13: error: too few arguments to function ‘strncpy’
  437 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:458:13: error: too few arguments to function ‘strncpy’
  458 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:479:13: error: too few arguments to function ‘strncpy’
  479 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:500:13: error: too few arguments to function ‘strncpy’
  500 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:522:13: error: too few arguments to function ‘strncpy’
  522 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:544:13: error: too few arguments to function ‘strncpy’
  544 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:566:13: error: too few arguments to function ‘strncpy’
  566 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:588:13: error: too few arguments to function ‘strncpy’
  588 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:610:13: error: too few arguments to function ‘strncpy’
  610 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:632:13: error: too few arguments to function ‘strncpy’
  632 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
src/monitor/sdb/expr.c:654:13: error: too few arguments to function ‘strncpy’
  654 |             strncpy(tokens[nr_token].str,"");
      |             ^~~~~~~
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:92:1: note: declared here
   92 | __NTH (strncpy (char *__restrict __dest, const char *__restrict __src,
      | ^~~~~
make: *** [/home/yanyusong/OneStudentOneChip/pa1/nemu_new/scripts/build.mk:34: /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/obj-riscv64-nemu-interpreter/src/monitor/sdb/expr.o] Error 1
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
+ LD /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter
/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter --log=/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt  
[src/utils/log.c:28 init_log] Log is written to /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt
[src/memory/paddr.c:56 init_mem] physical memory area [0x80000000, 0x87ffffff]
[src/monitor/monitor.c:51 load_img] No image is given. Use the default build-in image.
[src/monitor/monitor.c:28 welcome] Trace: ON
[src/monitor/monitor.c:29 welcome] If trace is enabled, a log file will be generated to record the trace. This may lead to a large log file. If it is not necessary, you can disable it in menuconfig
[src/monitor/monitor.c:32 welcome] Build time: 22:52:40, Mar  1 2023
Welcome to riscv64-NEMU!
For help, type "help"
(nemu) p 1024 + 768
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1024 + 768" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 4: 1024
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "1024 + 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "4"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " + 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 5 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "+ 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 6 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 7 with len 3: 768
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "3"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "768"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1024"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "768"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #05
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #06
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #03: Exit the "if" evaluation
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #04: q > p
Invalid eval() call
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #07
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p 2 + 8
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "2 + 8" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 1: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "2 + 8"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "2024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 1 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " + 8"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 2 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "+ 8"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 3 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " 8"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 4 with len 1: 8
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "8"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "868"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "2024"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "868"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #05
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #06
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #03: Exit the "if" evaluation
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #04: q > p
Invalid eval() call
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #07
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) q
[SDB INSTRUCTION: static int cmd_q(char *args)] cmd_q command
[SDB INSTRUCTION: static int cmd_q(char *args)] Exit NEMU
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
+ LD /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter
/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter --log=/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt  
[src/utils/log.c:28 init_log] Log is written to /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt
[src/memory/paddr.c:56 init_mem] physical memory area [0x80000000, 0x87ffffff]
[src/monitor/monitor.c:51 load_img] No image is given. Use the default build-in image.
[src/monitor/monitor.c:28 welcome] Trace: ON
[src/monitor/monitor.c:29 welcome] If trace is enabled, a log file will be generated to record the trace. This may lead to a large log file. If it is not necessary, you can disable it in menuconfig
[src/monitor/monitor.c:32 welcome] Build time: 22:52:40, Mar  1 2023
Welcome to riscv64-NEMU!
For help, type "help"
(nemu) p 1024 + 768
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1024 + 768" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 4: 1024
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "1024 + 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "4"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " + 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 5 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "+ 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 6 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 7 with len 3: 768
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "3"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "768"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1024"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "768"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #05
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #06
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #03: Exit the "if" evaluation
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #04: q > p
Invalid eval() call
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #07
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p 2 + 3
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "2 + 3" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 1: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "2 + 3"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "2024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 1 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " + 3"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 2 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "+ 3"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 3 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " 3"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 4 with len 1: 3
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "3"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "368"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "2024"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "368"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #05
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #06
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #03: Exit the "if" evaluation
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #04: q > p
Invalid eval() call
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #07
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) q
[SDB INSTRUCTION: static int cmd_q(char *args)] cmd_q command
[SDB INSTRUCTION: static int cmd_q(char *args)] Exit NEMU
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
src/monitor/sdb/expr.c: In function ‘make_token’:
src/monitor/sdb/expr.c:247:26: error: incompatible type for argument 1 of ‘memset’
  247 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:284:26: error: incompatible type for argument 1 of ‘memset’
  284 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:306:26: error: incompatible type for argument 1 of ‘memset’
  306 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:328:26: error: incompatible type for argument 1 of ‘memset’
  328 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:350:26: error: incompatible type for argument 1 of ‘memset’
  350 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:372:26: error: incompatible type for argument 1 of ‘memset’
  372 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:394:26: error: incompatible type for argument 1 of ‘memset’
  394 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:416:26: error: incompatible type for argument 1 of ‘memset’
  416 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:437:26: error: incompatible type for argument 1 of ‘memset’
  437 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:458:26: error: incompatible type for argument 1 of ‘memset’
  458 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:479:26: error: incompatible type for argument 1 of ‘memset’
  479 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:500:26: error: incompatible type for argument 1 of ‘memset’
  500 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:522:26: error: incompatible type for argument 1 of ‘memset’
  522 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:544:26: error: incompatible type for argument 1 of ‘memset’
  544 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:566:26: error: incompatible type for argument 1 of ‘memset’
  566 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:588:26: error: incompatible type for argument 1 of ‘memset’
  588 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:610:26: error: incompatible type for argument 1 of ‘memset’
  610 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:632:26: error: incompatible type for argument 1 of ‘memset’
  632 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
src/monitor/sdb/expr.c:654:26: error: incompatible type for argument 1 of ‘memset’
  654 |             memset(tokens[nr_token],0,sizeof(tokens[nr_token]));
      |                    ~~~~~~^~~~~~~~~~
      |                          |
      |                          Token {aka struct token}
In file included from /usr/include/features.h:486,
                 from /usr/include/x86_64-linux-gnu/bits/libc-header-start.h:33,
                 from /usr/include/stdint.h:26,
                 from /usr/lib/gcc/x86_64-linux-gnu/11/include/stdint.h:9,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/common.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/src/isa/riscv64/include/isa-def.h:19,
                 from /home/yanyusong/OneStudentOneChip/pa1/nemu_new/include/isa.h:20,
                 from src/monitor/sdb/expr.c:16:
/usr/include/x86_64-linux-gnu/bits/string_fortified.h:57:1: note: expected ‘void *’ but argument is of type ‘Token’ {aka ‘struct token’}
   57 | __NTH (memset (void *__dest, int __ch, size_t __len))
      | ^~~~~
make: *** [/home/yanyusong/OneStudentOneChip/pa1/nemu_new/scripts/build.mk:34: /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/obj-riscv64-nemu-interpreter/src/monitor/sdb/expr.o] Error 1
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ 
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ make run
+ CC src/monitor/sdb/expr.c
+ LD /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter
/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/riscv64-nemu-interpreter --log=/home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt  
[src/utils/log.c:28 init_log] Log is written to /home/yanyusong/OneStudentOneChip/pa1/nemu_new/build/nemu-log.txt
[src/memory/paddr.c:56 init_mem] physical memory area [0x80000000, 0x87ffffff]
[src/monitor/monitor.c:51 load_img] No image is given. Use the default build-in image.
[src/monitor/monitor.c:28 welcome] Trace: ON
[src/monitor/monitor.c:29 welcome] If trace is enabled, a log file will be generated to record the trace. This may lead to a large log file. If it is not necessary, you can disable it in menuconfig
[src/monitor/monitor.c:32 welcome] Build time: 22:52:40, Mar  1 2023
Welcome to riscv64-NEMU!
For help, type "help"
(nemu) p 1024 + 768
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "1024 + 768" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 4: 1024
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "1024 + 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "4"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1024"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " + 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 5 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "+ 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 6 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " 768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 7 with len 3: 768
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "768"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "3"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "768"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "1024"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "768"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #05
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #06
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #03: Exit the "if" evaluation
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #04: q > p
Invalid eval() call
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #07
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p 2 + 3
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "2 + 3" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 1: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "2 + 3"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "2"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 1 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " + 3"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 2 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "+ 3"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 3 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " 3"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 4 with len 1: 3
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "3"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "3"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "2"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "3"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #05
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #06
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #03: Exit the "if" evaluation
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #04: q > p
Invalid eval() call
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #07
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) 
(nemu) p 10 * 9
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "10 * 9" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 0 with len 2: 10
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "10 * 9"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "2"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "10"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 2 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " * 9"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[8] = "\*" at position 3 with len 1: *
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #20
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "* 9"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_MULTIPLY TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 240
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "*"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 4 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " 9"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 5 with len 1: 9
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "9"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "9"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 3
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  248, Token String: "10"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  240, Token String: "*"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  248, Token String: "9"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 0, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 2. Only Two Side Parentheses Check FAILED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #05
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #06
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #03: Exit the "if" evaluation
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #04: q > p
Invalid eval() call
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #07
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) p ( 1 + 1)
[SDB INSTRUCTION: static int cmd_p(char *args)] cmd_p command
[SDB INSTRUCTION: static int cmd_p(char *args)] p EXPR: Solve the expression EXPR
[SDB DEBUG: static int cmd_p(char *args)] Received Expression: "( 1 + 1)" , evaluating
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #01: Enter function word_t expr(char *e, bool *success)
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #02
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_left_count = 0
[EXPR DEBUG: bool check_parentheses_balance()] get check_parentheses_balance_right_count = 0
[EXPR CHECKPOINT: bool check_parentheses_balance()] CKPT #05
[EXPR DEBUG: bool check_parentheses_balance()] BALANCED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #03
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[6] = "\(" at position 0 with len 1: (
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #18
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "( 1 + 1)"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_LEFT_PARENTHESES TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 238
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "("
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 1 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " 1 + 1)"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 2 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "1 + 1)"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 3 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " + 1)"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[10] = "\+" at position 4 with len 1: +
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #22
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "+ 1)"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_PLUS TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 242
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "+"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[0] = " +" at position 5 with len 1:  
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #05
[EXPR DEBUG: static bool make_token(char *e)] substr_start is " 1)"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NOTYPE TOKEN
[EXPR DEBUG: static bool make_token(char *e)] TK_NOTYPE will be thrown away directly
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[2] = "[0-9]+" at position 6 with len 1: 1
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #14
[EXPR DEBUG: static bool make_token(char *e)] substr_start is "1)"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_NUMBER TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 248
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: "1"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #01
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #02
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #03
[src/monitor/sdb/expr.c:228 make_token] match rules[7] = "\)" at position 7 with len 1: )
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #19
[EXPR DEBUG: static bool make_token(char *e)] substr_start is ")"
[EXPR DEBUG: static bool make_token(char *e)] substr_len is "1"
[EXPR DEBUG: static bool make_token(char *e)] Found a TK_RIGHT_PARENTHESES TOKEN
[EXPR DEBUG: static bool make_token(char *e)] This is a OPERATOR_TOKEN
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].type is: 237
[EXPR DEBUG: static bool make_token(char *e)] tokens[nr_token].str is: ")"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #24
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #26
[EXPR DEBUG: static bool make_token(char *e)] Token Numbers (Decimal): 5
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    0, Token Type (Decimal ID):  238, Token String: "("
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    1, Token Type (Decimal ID):  248, Token String: "1"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    2, Token Type (Decimal ID):  242, Token String: "+"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    3, Token Type (Decimal ID):  248, Token String: "1"
[EXPR DEBUG: static bool make_token(char *e)] Token Number:    4, Token Type (Decimal ID):  237, Token String: ")"
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #27
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #03
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #04
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type II Fail, Right side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 1
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #03
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #04
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type II Fail, Right side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #03
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #04
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 3, get Type II Fail, Right side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 0, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #03
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #05
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #07
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #08
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #10
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #11
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] Check SUCCESS, parentheses are balanced!
[EXPR DEBUG: static bool make_token(char *e)] Paired Success, Left Index: 0, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 2
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 1, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 1, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 2, Right Index: 3
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 2, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 2, Right Index: 4
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #02
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] At Tokens Index: 3, get Type I Fail, Left side is not parenthese
[EXPR DEBUG: static bool make_token(char *e)] Paired Failed, Left Index: 3, Right Index: 4
[EXPR CHECKPOINT: static bool make_token(char *e)] CKPT #28
[EXPR DEBUG: static bool make_token(char *e)] Start Only Two Side Parentheses Check
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #01
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #03
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #05
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #07
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #06
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #08
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #10
[EXPR CHECKPOINT: bool check_parentheses(int left_index, int right_index)] CKPT #11
[EXPR DEBUG: bool check_parentheses(int left_index, int right_index)] Check SUCCESS, parentheses are balanced!
[EXPR DEBUG: static bool make_token(char *e)] Left: 0, Right: 4. Only Two Side Parentheses Check MATCHED
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #05
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #06
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #01: Enter function u_int64_t eval(int p, int q)
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #03: Exit the "if" evaluation
[EXPR CHECKPOINT: u_int64_t eval(int p, int q)] CKPT #04: q > p
Invalid eval() call
[EXPR CHECKPOINT: word_t expr(char *e, bool *success)] CKPT #07
Evaluate Success, Ans (Hex): 0, Ans (Dec): 0, Ans (Oct): 0
(nemu) q
[SDB INSTRUCTION: static int cmd_q(char *args)] cmd_q command
[SDB INSTRUCTION: static int cmd_q(char *args)] Exit NEMU
yanyusong@BJ101ECELabE:~/OneStudentOneChip/pa1/nemu_new$ 
